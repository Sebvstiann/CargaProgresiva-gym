# Generated by Django 5.2.1 on 2025-05-29 18:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ejercicio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Rutina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('peso', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='El peso debe ser un n√∫mero positivo')])),
                ('altura', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='La altura debe ser un n√∫mero positivo')])),
                ('edad', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='La edad debe ser un n√∫mero positivo')])),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='perfiles/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RegistroEntrenamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_hora', models.DateTimeField(auto_now_add=True)),
                ('series', models.IntegerField(default=3)),
                ('peso_agregado_KG', models.FloatField(blank=True, default=0, null=True)),
                ('repeticiones_en_la_primera_serie', models.IntegerField(default=0)),
                ('repeticiones_en_la_segunda_serie', models.IntegerField(default=0)),
                ('repeticiones_en_la_tercera_serie', models.IntegerField(default=0)),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('rendimiento_percibido', models.IntegerField(choices=[(1, 'üò´ Muy Malo'), (2, 'üòû Malo'), (3, 'üòê Regular'), (4, 'üòä Bueno'), (5, 'ü§© Excelente')], default=3)),
                ('ejercicio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entrenamiento.ejercicio')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('rutina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entrenamiento.rutina')),
            ],
            options={
                'ordering': ['-fecha_hora'],
            },
        ),
    ]
